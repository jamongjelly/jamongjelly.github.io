{"version":3,"sources":["webpack://gatsby-starter-blog/./src/components/Layout/CardView/index.tsx","webpack://gatsby-starter-blog/./src/lib/utils/stringUtils.ts","webpack://gatsby-starter-blog/./src/components/common/Badge/index.tsx","webpack://gatsby-starter-blog/./src/components/blog/TagCard/index.tsx","webpack://gatsby-starter-blog/./src/pages/tags/index.tsx","webpack://gatsby-starter-blog/./src/assets/images/placeholder.jpg"],"names":["children","className","mapToKebabCase","words","toLowerCase","replace","removeTagsFromHeadingTitle","title","label","tag","Link","to","name","src","placeholder","alt","totalCount","data","siteMetadata","site","thumbnails","allFile","nodes","tags","group","map","find","thumbnail","fieldValue","childImageSharp","fluid","Layout","pageTitle","CardView","key"],"mappings":"6IAUA,IAJA,YAA6C,IAAzBA,EAAwB,EAAxBA,SAClB,OAAO,uBAAKC,UAAU,aAAaD,K,2FCJ9B,IAAME,EAAiB,SAACC,GAAD,OAC5BA,EACGC,cACAC,QACC,oGACA,IAEDA,QAAQ,MAAO,KACfA,QAAQ,OAAQ,MAWd,IAWMC,EAA6B,SAACC,GAAD,OACxCA,EAAMF,QAAQ,eAAgB,O,iHCxBhC,MAJA,YAAuC,IAAtBG,EAAqB,EAArBA,MACf,OAAO,uBAAKP,UAAU,SAASO,I,8BCoBjC,MAhBA,YAAyC,IAAtBC,EAAqB,EAArBA,IACjB,OACE,uBAAKR,UAAU,YACb,gBAAC,EAAAS,KAAD,CAAMC,GAAE,UAAWT,QAAeO,EAAIG,OACpC,0BAAQX,UAAU,oBAChB,uBAAKY,IAAKJ,EAAII,KAAOC,IAAaC,IAAI,mBAExC,0BAAQd,UAAU,oBAChB,sBAAIA,UAAU,kBAAd,IAAiCQ,EAAIG,MACrC,gBAAC,EAAD,CAAOJ,OAAOC,aAAA,EAAAA,EAAKO,aAAc,QCQ3C,EAtBiB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACZC,EAAeD,EAAKE,KAAKD,aACzBE,EAAaH,EAAKI,QAAQC,MAE1BC,EAAON,EAAKM,KAAKC,MAAMC,KAAI,SAAAhB,GAC/B,IAAMI,EAAMO,EAAWM,MAAK,SAAAC,GAAS,OAAIA,EAAUf,OAASH,EAAImB,cAChE,MAAO,CACLhB,KAAMH,EAAImB,WACVZ,WAAYP,EAAIO,WAChBH,IAAKA,EAAMA,EAAIgB,gBAAgBC,MAAMjB,IAAM,OAI/C,OACE,gBAACkB,EAAA,EAAD,CAAQC,UAAU,OAAOd,aAAcA,GACrC,gBAACe,EAAA,EAAD,KACGV,GAAQA,EAAKE,KAAI,SAAAhB,GAAG,OAAI,gBAAC,EAAD,CAASyB,IAAKzB,EAAIG,KAAMH,IAAKA,W,kCCtB9D,IAAe,IAA0B","file":"component---src-pages-tags-index-tsx-7f516511156608c82e59.js","sourcesContent":["import React, { ReactNode } from \"react\";\r\n\r\ninterface indexProps {\r\n  children?: ReactNode;\r\n}\r\n\r\nfunction CardView({ children }: indexProps) {\r\n  return <div className=\"card-view\">{children}</div>;\r\n}\r\n\r\nexport default CardView;\r\n","import { ToCItem } from \"@src/lib/types/blog\";\r\nimport { ReactNode } from \"react\";\r\n\r\nexport const mapToKebabCase = (words: string) =>\r\n  words\r\n    .toLowerCase()\r\n    .replace(\r\n      /[^0-9a-zA-Zㄱ-힣.\\u3000-\\u303f\\u3040-\\u309f\\u30a0-\\u30ff\\uff00-\\uff9f\\u4e00-\\u9faf\\u3400-\\u4dbf -]/g,\r\n      \"\"\r\n    )\r\n    .replace(/\\s/g, \"-\")\r\n    .replace(/--+/g, \"-\");\r\n\r\nexport function getStringFromChildren(children: ReactNode): string {\r\n  return (\r\n    children &&\r\n    (Object.values(children).reduce((acc: string, item) => {\r\n      return typeof item === \"string\" ? acc + item : acc;\r\n    }) as string)\r\n  );\r\n}\r\n\r\nexport const mapHeadingTitleToId = (title: string | ReactNode) => {\r\n  let id;\r\n  if (typeof title === \"object\") {\r\n    id = getStringFromChildren(title);\r\n  } else {\r\n    id = title;\r\n  }\r\n\r\n  return mapToKebabCase(id.replaceAll(/[<][^>]*[>]/g, \"\"));\r\n};\r\n\r\nexport const removeTagsFromHeadingTitle = (title: string) =>\r\n  title.replace(/[<][^>]*[>]/g, \" \");\r\n\r\nexport function addSuffixToDuplicatedAnchors(arr: any[]) {\r\n  const anchor = mapHeadingTitleToId(arr);\r\n  const hasDuplicate = arr.find(item => item.anchor === anchor);\r\n  const filtered = arr.filter(item => item.anchor.indexOf(anchor) > -1);\r\n  const suffix =\r\n    !hasDuplicate && filtered.length === 0 ? \"\" : `-${filtered.length + 1}`;\r\n\r\n  const suffixed = `${anchor}${suffix}`;\r\n}\r\n","import React from \"react\";\r\n\r\ninterface BadgeProps {\r\n  label: string | number;\r\n}\r\n\r\nfunction Badge({ label }: BadgeProps) {\r\n  return <div className=\"badge\">{label}</div>;\r\n}\r\n\r\nexport default Badge;\r\n","import Badge from \"@src/components/common/Badge\";\r\nimport { Tag } from \"@src/lib/types/blog\";\r\nimport { mapToKebabCase } from \"@src/lib/utils/stringUtils\";\r\nimport { Link } from \"gatsby\";\r\nimport React from \"react\";\r\nimport placeholder from \"@src/assets/images/placeholder.jpg\";\r\n\r\ninterface TagCardProps {\r\n  tag: Tag;\r\n}\r\n\r\nfunction TagCard({ tag }: TagCardProps) {\r\n  return (\r\n    <div className=\"tag-card\">\r\n      <Link to={`/tags/${mapToKebabCase(tag.name)}`}>\r\n        <header className=\"tag-card__header\">\r\n          <img src={tag.src || placeholder} alt=\"Tag Thumbnail\" />\r\n        </header>\r\n        <footer className=\"tag-card__footer\">\r\n          <h6 className=\"tag-card__name\">#{tag.name}</h6>\r\n          <Badge label={tag?.totalCount || 0} />\r\n        </footer>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TagCard;\r\n","import { graphql } from \"gatsby\";\r\nimport * as React from \"react\";\r\nimport Layout from \"@src/components/Layout\";\r\nimport CardView from \"@src/components/Layout/CardView\";\r\nimport TagCard from \"@src/components/blog/TagCard\";\r\n\r\nconst TagsPage = ({ data }) => {\r\n  const siteMetadata = data.site.siteMetadata;\r\n  const thumbnails = data.allFile.nodes;\r\n\r\n  const tags = data.tags.group.map(tag => {\r\n    const src = thumbnails.find(thumbnail => thumbnail.name === tag.fieldValue);\r\n    return {\r\n      name: tag.fieldValue,\r\n      totalCount: tag.totalCount,\r\n      src: src ? src.childImageSharp.fluid.src : \"\",\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Layout pageTitle=\"Tags\" siteMetadata={siteMetadata}>\r\n      <CardView>\r\n        {tags && tags.map(tag => <TagCard key={tag.name} tag={tag} />)}\r\n      </CardView>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default TagsPage;\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        author {\r\n          name\r\n        }\r\n      }\r\n    }\r\n    tags: allMdx {\r\n      group(field: frontmatter___tags) {\r\n        fieldValue\r\n        totalCount\r\n      }\r\n    }\r\n    allFile(filter: { relativeDirectory: { eq: \"tags\" } }) {\r\n      nodes {\r\n        name\r\n        childImageSharp {\r\n          fluid(maxWidth: 400) {\r\n            ...GatsbyImageSharpFluid_tracedSVG\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/placeholder-b3edaee4440154c16f17e70d50e43e64.jpg\";"],"sourceRoot":""}