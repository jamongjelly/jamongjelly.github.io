{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/front-end/junit/test/","result":{"data":{"site":{"siteMetadata":{"title":"Mechanism Design","author":{"name":"Apple isle"}}},"markdownRemark":{"id":"d0219d6f-9333-5d5a-89d9-6a22ee3fa336","excerpt":"어떤 조건이 예상 결과와 부합하는지 검증하는 구문입니다. H1 편집의 기본,그리드를 이해하라 H2 타이포그래피로정보를 시각화하라 H3 다양한 편집& 그리드 디자인을 분석하라 H4 인쇄에 안정적인폰트를 활용한 디자인 H5 다양한 변화가 가능한아이덴티티를 사용한 디자인 H6 지난…","html":"<blockquote>\n<p><em>어떤 조건이 예상 결과와 부합하는지 검증하는 구문입니다.</em></p>\n</blockquote>\n<h1>H1 편집의 기본,<br/>그리드를 이해하라</h1>\n<h2>H2 타이포그래피로<br/>정보를 시각화하라</h2>\n<h3>H3 다양한 편집<br/>&#x26; 그리드 디자인을 분석하라</h3>\n<h4>H4 인쇄에 안정적인<br/>폰트를 활용한 디자인</h4>\n<h5>H5 다양한 변화가 가능한<br/>아이덴티티를 사용한 디자인</h5>\n<h6>H6 지난 5월, 보육시설 아동 및 청소년들을 대상으로 진행한 제1회 소이프 미술공모전에 출품된 작품 중 하나가 저희들의 눈길을 끌었습니다.</h6>\n<p class=\"body-lg\">Body Large 일본 영화 애호가들과 영화 제작자, 그리고 예술가들을 독일 프랑크프루트로 불러 모으고 있습니다.</p>\n<p>Body Normal 새, 나비, 벌과 고양이 그리고 화분과 예쁜 구름까지 다양한 색상을 사용하여 그린 그림이 너무 귀엽고 예뻤습니다. 그 중에서도 다채로운 색상으로 꾸며진 구름을 보며 어떻게 이렇게 표현을 했을까! 감탄했습니다. 이러한 아이들의 예쁜 눈과 마음이 더욱 예쁘게 자랄 수 있기를 바라며 이 아동의 그림 중 구름과 꽃을 모티브로 티셔츠를 디자인 했습니다.</p>\n<h4>Style</h4>\n<ol>\n<li>전통적 스타일의 <span style=\"color: #f19c43;\"><strong>JUnit Assert</strong></span> 라이브러리</li>\n<li>표현력이 뛰어난 <span style=\"color: #ffcc49;\"><strong>Hamcrest CoreMatchers</strong></span> 라이브러리</li>\n</ol>\n<h2>Assert</h2>\n<ul>\n<li>assert 메소드의 첫번째 파라미터는 ‘에러 메시지’이며, 생략 가능합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token comment\">// 배열 비교</span>\n<span class=\"token function\">assertArrayEquals</span><span class=\"token punctuation\">(</span>배열<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 배열<span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 값 비교</span>\n<span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span>데이터<span class=\"token punctuation\">,</span> 데이터<span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>옵션<span class=\"token operator\">></span> 오차 범위<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 내용 비교</span>\n<span class=\"token function\">assertSame</span><span class=\"token punctuation\">(</span>데이터<span class=\"token punctuation\">,</span> 데이터<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 주소 비교</span>\n<span class=\"token function\">assertNotSame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 주소 비교</span>\n\n<span class=\"token comment\">// boolean 논리 값 비교</span>\n<span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">assertFalse</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// null 값 검증</span>\n<span class=\"token function\">assertNull</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">assertNotNull</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>AssertJ</h2>\n<blockquote>\n<p>assertThat( 실제 값 ).체이닝 메소드( 인자 )</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token comment\">// assertThat import 구문</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>assertj<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Assertions</span><span class=\"token punctuation\">.</span>assertThat<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h2>Hamcrest</h2>\n<blockquote>\n<p>assertThat ( (Optional) Assertion 메시지, 실제값, Matcher 객체 )</p>\n</blockquote>\n<p><span style=\"color: #ff0000;\">※ 주의 :   junit의 assertThat이 deprecated 되었습니다.</span></p>\n<p>＊Assertion 메시지는 추후 코드와 일치하지 않게 되는 경우가 많으므로 사용하지 않는 것을 추천합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token comment\">// 값 비교</span>\n<span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"찹쌀떡\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"찹쌀떡\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 장식자</span>\n<span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"찹쌀떡\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"찹쌀떡\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 부정</span>\n<span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"찹쌀떡\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">not</span><span class=\"token punctuation\">(</span><span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"시루떡\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// null 값</span>\n<span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getAvatar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">nullValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getAvatar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">notNullValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// allOf</span>\n<span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">allOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// anyOf</span>\n<span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">not</span><span class=\"token punctuation\">(</span><span class=\"token function\">allOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bad\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">anyOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bad\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// hasItems</span>\n<span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">hasItems</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// both A and B</span>\n<span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token function\">both</span><span class=\"token punctuation\">(</span><span class=\"token function\">containsString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token function\">containsString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// everyItem</span>\n<span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"fun\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"net\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">everyItem</span><span class=\"token punctuation\">(</span><span class=\"token function\">containsString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// sameInstance</span>\n<span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">not</span><span class=\"token punctuation\">(</span><span class=\"token function\">sameInstance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// either</span>\n<span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token function\">not</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CombinableMatcher</span><span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">either</span><span class=\"token punctuation\">(</span><span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// closeTo : 부동소수점 연산 &amp; 비교</span>\n<span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token function\">closeTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">15.70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<table>\n<thead>\n<tr>\n<th>Matcher 객체</th>\n<th>인자</th>\n<th>비고</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>equalTo</td>\n<td>( 원시 타입 또는 자바 인스턴스 )</td>\n<td>equals( ) 메소드 사용<br />원시 타입은 Wrapper 객체로 오토박싱</td>\n</tr>\n<tr>\n<td>is</td>\n<td>( Matcher 객체,<br />원시 타입 또는 자바 인스턴스 )</td>\n<td>가독성을 높이기 위한 장치로,<br />별다른 기능을 수행하지 않습니다.</td>\n</tr>\n<tr>\n<td>not</td>\n<td>( Matcher 객체 )</td>\n<td>부정의 의미를 추가합니다.</td>\n</tr>\n<tr>\n<td>nullValue</td>\n<td>-</td>\n<td>예상 값을 null로 둡니다.</td>\n</tr>\n<tr>\n<td>notNullValue</td>\n<td>-</td>\n<td>예상 값이 null이 아닐 때 사용합니다.</td>\n</tr>\n<tr>\n<td>allOf</td>\n<td>( Matcher 객체들, … )</td>\n<td>Matcher 객체 모두가 참이어야<br />테스트를 통과합니다.</td>\n</tr>\n<tr>\n<td>anyOf</td>\n<td>( Matcher 객체들, … )</td>\n<td>Matcher 객체 중 하나가 참이면<br />테스트를 통과합니다.</td>\n</tr>\n<tr>\n<td>closeTo</td>\n<td>( 부동소수점 값, 근사치 허용 오차 )</td>\n<td>두 부동소수점 수의 차이가 허용 오차<br /> 안이면 테스트를 통과합니다.</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>hamcrest 기본 예제</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>hamcrest<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CoreMatchers</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>hamcrest<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IsCloseTo</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TempTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">assertTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// given</span>\n        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"테스터\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// when</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// then</span>\n        <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">equalTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"테스터\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Assert vs. Hamcrest 비교</h2>\n<h3>1. 오류 메시지</h3>\n<p><strong>JUnit Assert</strong></p>\n<p><img src=\"../../../.gitbook/assets/spring/junit/junit_assert_error_message.png\" alt=\"assertEquals(D:\\Projects\\GitHub\\GitBook-TIL.gitbook\\assets\\spring\\junit\\junit_assert_error_message.png);\"></p>\n<p><strong>Hamcrest</strong></p>\n<p><img src=\"../../../.gitbook/assets/spring/junit/hamcrest_error_message.png\" alt=\"assertThat(../../../.gitbook/assets/spring/junit/hamcrest_error_message.png);\"></p>\n<ul>\n<li>변경 사항을 체계적으로 관리합니다.</li>\n<li>파일 이름을 더럽히지 않고 버전을 관리할 수 있게 도와주는 도구입니다.</li>\n<li>소스 코드를 백업해주므로 장애 회복 시 유용하게 쓰입니다.</li>\n</ul>","frontmatter":{"title":"JUnit Assertion","date":"June 07, 2021","description":"This is a custom description for SEO and Open Graph purposes, rather than the default generated excerpt. Simply add a description field to the frontmatter."}},"previous":{"fields":{"slug":"/new-beginnings/"},"frontmatter":{"title":"New Beginnings"}},"next":null},"pageContext":{"id":"d0219d6f-9333-5d5a-89d9-6a22ee3fa336","previousPostId":"5c0bd602-5b59-5162-a414-b12635e49645"}},"staticQueryHashes":[]}